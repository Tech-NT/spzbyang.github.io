<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my first blog</title>
    <url>/2021/10/31/My-First-Blog/</url>
    <content><![CDATA[<p>2021.10.31<br>之前在csdn上写过blog，但实在太丑，所以想自己整一个blog。虽然还很简陋，但会慢慢改变的。</p>
<p>目前的目标是更新所有OI算法，包括以前完全看不懂的那种，还有题解</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>printf</title>
    <url>/2021/11/09/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9/printf/</url>
    <content><![CDATA[<p>printf(“ldjfal””@”);<br>输出ldjfal@;</p>
<p>pinrtf(“%%”);<br>输出%</p>
<p>转自<a href="https://blog.csdn.net/m0_48809769/article/details/108219550">c++库函数] printf函数使用方法</a></p>
<p>2 参数<br>sort函数的模板有两个参数：</p>
<p>printf(“&lt;式样化字符串&gt;”，&lt;参数表&gt;)；</p>
<p>3 式样化字符串<br>[1] 转换说明符<br>%a 浮点数、十六进制bai数字和p-记法（C99）<br>%c 一个字符<br>%d 有符号十进制整数<br>%e 浮点数、e-记数法<br>%f 浮点数、十进制记数法<br>%g 根据数值不同自动选择％f或％e．<br>%i 有符号十进制数（与％d相同）<br>%o 无符号八进制整数<br>%p 指针<br>%s 字符串<br>%u 无符号十进制整数<br>%x 使用十六进制数字0f的无符号十六进制整数<br>%% 打印一个百分号</p>
<p>[2]标志<br>左对齐：”-“ e.g. “%-20s”<br>右对齐：”+” e.g. “%+20s”<br>空格：若符号为正，则显示空格，负则显示”-“ e.g. “% “<br>#：对c,s,d,u类无影响；对o类，在输出时加前缀o；对x类，在输出时加前缀0x；<br>对e,g,f 类当结果有小数时才给出小数点。</p>
<p>[3]格式字符串（格式）<br>［标志］［输出最少宽度］［．精度］［长度］类型<br>“％-md” ：左对齐，若m比实际少时，按实际输出。<br>“%m.ns”：输出m位，取字符串(左起)n位，左补空格，当n&gt;m or m省略时m&#x3D;n<br>e.g. “%7.2s” 输入CHINA<br>　 输出” CH”<br>“%m.nf”：输出浮点数，m为宽度，n为小数点右边数位<br>e.g. “%” 输入3852.99<br>输出3853.0<br>长度：为ｈ短整形量,ｌ为长整形量</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo blog 的搭建与美化</title>
    <url>/2022/07/05/hexo-blog-%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<hr>
<h3 id="搭建blog"><a href="#搭建blog" class="headerlink" title="搭建blog"></a>搭建blog</h3><p>详见官方文档吧，时间太久有点忘了</p>
<p><a href="https://hexo.io/zh-cn/docs/setup">建站 | Hexo</a></p>
<h4 id="几条常用指令"><a href="#几条常用指令" class="headerlink" title="几条常用指令"></a>几条常用指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;//新建一篇文章，layout表示默认或者自定义的布局</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo g//生成本地文件</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo s//启动服务器，然后可以在http://localhost:4000/预览自己的blog</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d//将blog部署到网站</span><br></pre></td></tr></table></figure>



<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>站点配置文件 <code>blog/_config.yml</code></p>
<p>主题配置文件 <code> blog/themes/主题/_config.yml</code></p>
<h4 id="数学公式渲染"><a href="#数学公式渲染" class="headerlink" title="数学公式渲染"></a>数学公式渲染</h4><p>耽误了很久，之前一直尝试用<code>hexo-renderer-pandoc</code>来解决问题，但是似乎是mathjax的cdn出现了问题， $ 全部被渲染成了\(</p>
<p>最后换上了<code>hexo-renderer-markdown-it-plus</code>，</p>
<ol>
<li><p>卸载原来的渲染器<br><code>npm uninstall hexo-renderer-marked --save</code></p>
</li>
<li><p>下载新渲染器<br><code>npm i @upupming/hexo-renderer-markdown-it-plus --save</code></p>
</li>
<li><p>在主题配置文件中修改math</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  per_page: true</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    per_page: true</span><br><span class="line">    mhchem: false</span><br><span class="line">  katex:</span><br><span class="line">    enable: true</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/qq_36667170/article/details/105846999">hexo 更换 markdown渲染器</a></p>
<p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md#%E6%8F%90%E4%BE%9B%E7%9A%84%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E">hexo-theme-next官方文档</a></p>
</li>
</ol>
<h4 id="渲染图片"><a href="#渲染图片" class="headerlink" title="渲染图片"></a>渲染图片</h4><p>利用typora将图片存到<code>source/images/$&#123;filename&#125;</code> 的文件夹中</p>
<p><img src="/../images/hexo-blog-%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%BE%8E%E5%8C%96/image-20220705230337868.png" alt="image-20220705230337868"></p>
<p>接着用 <code> npm install hexo-renderer-marked</code> 安装hexo-renderer-marked，并修改站点配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>之后就支持<code>![](image.jpg)</code>的形式插入图片了，而在typora插入图片会自动保存到source&#x2F;image文件夹内</p>
<p>参考：<a href="https://cloud.tencent.com/developer/article/1736563">hexo博客中如何插入图片</a></p>
<h3 id="blog美化"><a href="#blog美化" class="headerlink" title="blog美化"></a>blog美化</h3><h4 id="代码的折叠"><a href="#代码的折叠" class="headerlink" title="代码的折叠"></a>代码的折叠</h4><p>通过 spoil 的插件实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler --save</span><br></pre></td></tr></table></figure>

<div class='spoiler collapsed'>
    <div class='spoiler-title'>
        点击显/隐内容
    </div>
    <div class='spoiler-content'>
        <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler &quot;点击显/隐内容&quot; %&#125;</span><br><span class="line">什么都可以</span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>

<p>参考 <a href="https://wty-yy.github.io/posts/44830/">Hexo Fluid 代码折叠</a></p>
<h4 id="在主页添加【阅读全文】"><a href="#在主页添加【阅读全文】" class="headerlink" title="在主页添加【阅读全文】"></a>在主页添加【阅读全文】</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 5  </span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>

<p>如果没有，在主题配置文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt_description: true</span><br><span class="line">read_more_btn: true</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/07/Codeforces-Round-226-Div-2/</url>
    <content><![CDATA[<p>吹水时间：这场比赛有点水了，或者说比较有年代感了，CDE基本上算秒了，题解也随意一点吧</p>
<h3 id="C-Bear-and-Prime-Numbers"><a href="#C-Bear-and-Prime-Numbers" class="headerlink" title="C.Bear and Prime Numbers"></a>C.Bear and Prime Numbers</h3><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p><img src="/../images/Codeforces-Round-226-Div-2/image-20220707190806575.png" alt="image-20220707190806575"></p>
<p>$n \le 10^6, x_i \le 10^7, l,r\le10^9$</p>
<h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>看数据范围，理论上难点在于分解质因数，不过我稍微优化了一下就过了，当然可能是由于数据较水，官方题解也只说了句在读入时处理</p>
<p>之后就很简单了，将每个$x_i$分解质因数，对应的$f(p)+1$，之后对$f(p)$做一遍前缀和即可</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        点击显/隐内容
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">7</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="keyword">bool</span> numlist[N];</span><br><span class="line"><span class="keyword">int</span> prime[N], prefix[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1e7</span>; i++) &#123;<span class="comment">//欧拉筛 </span></span><br><span class="line">		<span class="keyword">if</span> (numlist[i] == <span class="number">0</span>) prime[++*prime] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= *prime &amp;&amp; prime[j]*i &lt;= <span class="number">1e7</span>; j++) &#123;</span><br><span class="line">			numlist[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i%prime[j] == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">pri</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= *prime &amp;&amp; prime[j]*prime[j] &lt;= x &amp;&amp; numlist[x]; j++) <span class="keyword">if</span> (x%prime[j] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span> (x%prime[j] == <span class="number">0</span>) x/=prime[j];</span><br><span class="line">			prefix[prime[j]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!numlist[x]) prefix[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e7</span>; i++) prefix[i] += prefix[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">int</span> m, l, r;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">		r = <span class="built_in">min</span>(r, <span class="number">10000000</span>);</span><br><span class="line">		l = <span class="built_in">min</span>(l, r+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prefix[r]-prefix[l<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>

<h3 id="D-Bear-and-Floodlight"><a href="#D-Bear-and-Floodlight" class="headerlink" title="D.Bear and Floodlight"></a>D.Bear and Floodlight</h3><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><p><img src="/../images/Codeforces-Round-226-Div-2/image-20220707192234974.png" alt="image-20220707192234974"></p>
<img src="../images/Codeforces-Round-226-Div-2/768ca3d55c62cd11f4734906353a59b19b7e23fc.png" alt="img" style="zoom: 50%;" />

<h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>可以想到状压dp，令$dp[s]$表示路灯选择情况为$s$时，光源能照到的最右端，$s$为长度为n的01串。</p>
<p>假如之前$i-1$个路灯最多可以照亮到X的位置，那么显然第i个路灯的光源能照到的最左端是X，可以算出新的：</p>
<img src="../images/Codeforces-Round-226-Div-2/image-20220707193552504.png" alt="image-20220707193552504" style="zoom:67%;" />

<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        点击显/隐内容
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5e4</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> L, R;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">25</span>], y[<span class="number">25</span>], du[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">double</span> dp[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hu</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="keyword">return</span> x*pi/<span class="number">180</span>;&#125;<span class="comment">//转弧度制 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">(node &amp;a, <span class="keyword">double</span> sita)</span> </span>&#123;</span><br><span class="line">	sita = <span class="built_in">hu</span>(sita);</span><br><span class="line">	<span class="keyword">double</span> x = a.x*<span class="built_in">cos</span>(sita)-a.y*<span class="built_in">sin</span>(sita);</span><br><span class="line">	<span class="keyword">double</span> y = a.x*<span class="built_in">sin</span>(sita)+a.y*<span class="built_in">cos</span>(sita);</span><br><span class="line">	a.x = x; a.y = y;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;L, &amp;R);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x[i], &amp;y[i], &amp;du[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>&lt;&lt;n; i++) &#123;</span><br><span class="line">		dp[i] = L;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;j)) &#123;</span><br><span class="line">			<span class="keyword">double</span> l = dp[i^(<span class="number">1</span>&lt;&lt;j)];</span><br><span class="line">			node t = (node)&#123;l-x[j], <span class="number">-1.0</span>*y[j]&#125;;</span><br><span class="line">			<span class="keyword">if</span> (y[j] &lt; <span class="number">0</span>) <span class="built_in">revolve</span>(t, -du[j]);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">revolve</span>(t, du[j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">fabs</span>(t.x) &lt; <span class="number">1e-8</span>) dp[i] = <span class="built_in">max</span>(dp[i], <span class="number">1.0</span>*x[j]);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ((t.x &gt; <span class="number">0</span> &amp;&amp; y[j] &gt; <span class="number">0</span> &amp;&amp; t.y &gt;= <span class="number">0</span>) || (t.x &gt; <span class="number">0</span> &amp;&amp; y[j] &lt; <span class="number">0</span> &amp;&amp; t.y &lt;= <span class="number">0</span>)) dp[i] = R;</span><br><span class="line">			<span class="keyword">else</span> dp[i] = <span class="built_in">max</span>(dp[i], x[j]+(<span class="number">-1.0</span>*y[j]/t.y)*t.x);</span><br><span class="line">			<span class="keyword">if</span> (dp[i] &gt;= R) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>, R-L);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, <span class="built_in">min</span>(dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>], R)-L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>

<h3 id="E-Bear-in-the-Field"><a href="#E-Bear-in-the-Field" class="headerlink" title="E.Bear in the Field"></a>E.Bear in the Field</h3><h5 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h5><p><img src="/../images/Codeforces-Round-226-Div-2/image-20220707195506594.png" alt="image-20220707195506594"></p>
<h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><p>这种走$10^{18}$次的一看就是矩阵快速幂</p>
<p>细节：$x_i,y_i\in[1,n]$，因此需要将整个棋盘移至$(0,0)$，方便取模运算，同时dx，dy每次会少加2，给他加回去<br>$$<br>x_i &#x3D; x_{i-1}+(dx_{i-1}+x_{i-1}+y_{i-1}+2)+(i-1)\<br>y_i &#x3D; y_{i-1}+(dy_{i-1}+x_{i-1}+y_{i-1}+2)+(i-1)\<br>dx_i &#x3D; dx_{i-1}+x_{i-1}+y_{i-1}+(i-1)+2\<br>dy_i &#x3D; dy_{i-1}+x_{i-1}+y_{i-1}+(i-1)+2\<br>$$<br>定义矩阵$A,B$。A为转移数组，B记录包含$x,y,dx,dy$等信息。构造A，使A满足$B_i &#x3D; A\times B_{i-1}$。也就是说B左乘A相当于在棋盘上走了一步，左乘$t$次就是答案。而矩阵满足分配率，也就是说可以先求出$A^t$，这一部分可以用快速幂实现。</p>
<p>具体矩阵尽量自己推，不行的话就看代码吧。</p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        点击显/隐内容
    </div>
    <div class='spoiler-content'>
        <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">7</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, sx, sy, dx, dy, P;</span><br><span class="line">ll T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">matrix</span>() &#123;<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//输出 </span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; j++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i][m]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;A, B;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">matrix <span class="keyword">operator</span> * (matrix x, matrix y) &#123;</span><br><span class="line">	<span class="keyword">if</span> (x.m != y.n) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;乘法不合法&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	matrix c; c.n = x.n; c.m = y.m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c.n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c.m; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= x.m; k++) &#123;</span><br><span class="line">				 c.a[i][j]=(c.a[i][j]+<span class="number">1ll</span>*x.a[i][k]*y.a[k][j]%P)%P;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(matrix A, ll b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (A.n != A.m) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> A;</span><br><span class="line">	&#125;</span><br><span class="line">	matrix s = A;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= A.n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=A.n; j++)</span><br><span class="line">			s.a[i][j] = i==j;</span><br><span class="line">	<span class="keyword">for</span> (; b; b&gt;&gt;=<span class="number">1</span>, A = A*A) <span class="keyword">if</span> (b&amp;<span class="number">1</span>) s = s*A;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%lld&quot;</span>, &amp;n, &amp;sx, &amp;sy, &amp;dx, &amp;dy, &amp;T); P = n;</span><br><span class="line">	B.n = <span class="number">6</span>; B.m = <span class="number">1</span>;</span><br><span class="line">	B.a[<span class="number">1</span>][<span class="number">1</span>] = sx<span class="number">-1</span>; B.a[<span class="number">2</span>][<span class="number">1</span>] = sy<span class="number">-1</span>;B.a[<span class="number">3</span>][<span class="number">1</span>] = (dx%P+P)%P; B.a[<span class="number">4</span>][<span class="number">1</span>] = (dy%P+P)%P;</span><br><span class="line">	B.a[<span class="number">5</span>][<span class="number">1</span>] = <span class="number">0</span>; B.a[<span class="number">6</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	A.n = <span class="number">6</span>; A.m = <span class="number">6</span>;</span><br><span class="line">	A.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">2</span>; A.a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>; A.a[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>; A.a[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">0</span>; A.a[<span class="number">1</span>][<span class="number">5</span>] = <span class="number">1</span>; A.a[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">	A.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; A.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>; A.a[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>; A.a[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">1</span>; A.a[<span class="number">2</span>][<span class="number">5</span>] = <span class="number">1</span>; A.a[<span class="number">2</span>][<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">	A.a[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>; A.a[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>; A.a[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>; A.a[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">0</span>; A.a[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">1</span>; A.a[<span class="number">3</span>][<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">	A.a[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">1</span>; A.a[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">1</span>; A.a[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">0</span>; A.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>; A.a[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>; A.a[<span class="number">4</span>][<span class="number">6</span>] = <span class="number">2</span>;</span><br><span class="line">	A.a[<span class="number">5</span>][<span class="number">5</span>] = <span class="number">1</span>; A.a[<span class="number">5</span>][<span class="number">6</span>] = <span class="number">1</span>; A.a[<span class="number">6</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">	A = <span class="built_in">ksm</span>(A, T)*B;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, A.a[<span class="number">1</span>][<span class="number">1</span>]+<span class="number">1</span>, A.a[<span class="number">2</span>][<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
  </entry>
</search>
