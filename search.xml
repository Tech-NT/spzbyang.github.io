<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021.11.21CCPC威海</title>
    <url>/2021/11/24/2021-11-21CCPC%E5%A8%81%E6%B5%B7/</url>
    <content><![CDATA[<p>2021.11.21CCPC威海</p>
<p><a href="https://codeforces.com/gym/103428">Dashboard - The 2021 CCPC Weihai Onsite - Codeforces</a></p>
<h1 id="A-Goodbye-Ziyin"><a href="#A-Goodbye-Ziyin" class="headerlink" title="A:Goodbye,Ziyin!"></a>A:Goodbye,Ziyin!</h1><ul>
<li>题意：一棵树，选根使之成为二叉树，求这种点的数量</li>
</ul>
<p>若有一个点的度大于3，那么必然不可能形成二叉树</p>
<ul>
<li><p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="keyword">int</span> head[N], ru[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t, nxt;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">	e[++cnt].t = t; e[cnt].nxt = head[u]; head[u] = cnt;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">		ru[u]++; ru[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (ru[i] &gt; <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (ru[i] == <span class="number">3</span>) ans--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>codeforces1406C</title>
    <url>/2021/11/09/codeforces1406C/</url>
    <content><![CDATA[<hr>
<h2>题意</h2>

<p>给定一棵节点数为 $n$的树 ， 删一条边然后加上一条边 ， 使得该树的重心唯一 。（删掉的边和加上的边可以是同一条）</p>
<hr>
<p>由重心的性质可知，一棵树最多只有两个重心，而“在一棵树上添加或删除一个叶子，那么它的重心最多只移动一条边的距离。” 我们只需将一个重心子树中的一个叶节点连到另一个重心上即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd c=getchar()</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123; <span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> c;<span class="keyword">while</span>(dd, c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>) <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>; <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,dd;<span class="keyword">return</span> w*s;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> dd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cnt, ct;</span><br><span class="line"><span class="keyword">int</span> head[N], fa[N], siz[N],centroid[<span class="number">2</span>], ru[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t, nxt;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	e[++cnt].t = v; e[cnt].nxt = head[u]; head[u]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">	siz[x] = <span class="number">1</span>; fa[x] = f;</span><br><span class="line">	<span class="keyword">int</span> flg = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t =  e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs1</span>(t, x);</span><br><span class="line">		<span class="keyword">if</span> (siz[t] &gt; n/<span class="number">2</span>) flg = <span class="number">0</span>;</span><br><span class="line">		siz[x] += siz[t]; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n-siz[x] &gt; n/<span class="number">2</span>) flg = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (flg) centroid[ct++] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ru[x] == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == f) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">dfs2</span>(t, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cnt = ct = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) head[i] = fa[i] = siz[i] = ru[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		u = <span class="built_in">read</span>(); v = <span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">		ru[u]++; ru[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (ct == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n%d %d\n&quot;</span>, <span class="number">1</span>, e[head[<span class="number">1</span>]].t, <span class="number">1</span>, e[head[<span class="number">1</span>]].t);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (ru[i] == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = <span class="built_in">dfs2</span>(centroid[<span class="number">0</span>], centroid[<span class="number">1</span>]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, t, e[head[t]].t);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, t, centroid[<span class="number">1</span>]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//	freopen(&quot;1.in&quot;, &quot;r&quot;, stdin); </span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>树的重心</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 124 (Rated for Div. 2) CF1651</title>
    <url>/2022/03/31/Educational-Codeforces-Round-124-Rated-for-Div-2/</url>
    <content><![CDATA[<h3 id="1651-A-Playoff"><a href="#1651-A-Playoff" class="headerlink" title="1651.A. Playoff"></a>1651.A. Playoff</h3><p>第1轮之后只剩下奇数，那么只要取最大的奇数$2^n-1$就可以了</p>
<h3 id="1651-B-Prove-Him-Wrong"><a href="#1651-B-Prove-Him-Wrong" class="headerlink" title="1651.B. Prove Him Wrong"></a>1651.B. Prove Him Wrong</h3><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>询问是否能构造一组数列，使得任选两个数$a_i, a_j$，将其都变为$|a_i-a_j|$后数列总和不会变小</p>
<h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>做过类似的题，由于$a_i\le10^9$，所以此数列的长度应该是有限的，所以应该构建一个尽量小的数列，使得数列长度最长。</p>
<p>假设$a_i\textless a_j$，那么$a_j \ge 3*a_i$，令最小的数为$1$，可以构造数列$1,3^1,3^2,3^3……$,长度最多为$log_3 10^9$</p>
<h3 id="1651-C-Fault-tolerant-Network"><a href="#1651-C-Fault-tolerant-Network" class="headerlink" title="1651.C. Fault-tolerant Network"></a>1651.C. Fault-tolerant Network</h3><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><p>![image-20220401202343000](D:\My blog\source_posts\photo\image-20220401202343000.png)</p>
<h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>可以看出4个端点是必须有边连到对面，不然去掉一个点边点一定会断，因此直接枚举每个边点连另两个边点或者中间最小的点就可以了</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><div class='spoiler collapsed'>
    <div class='spoiler-title'>
        代码
    </div>
    <div class='spoiler-content'>
        <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (ts&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ts&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>, P = <span class="number">998244353</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], E[<span class="number">5</span>][<span class="number">5</span>], vis[<span class="number">5</span>][<span class="number">5</span>], st[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//代价</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(a[x]-b[y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll S)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">4</span>) &#123;</span><br><span class="line">		ans = <span class="built_in">min</span>(ans, S);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">		vis[x][i] = <span class="number">1</span>;</span><br><span class="line">		st[++*st] = i;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">2</span> &amp;&amp; (vis[<span class="number">1</span>][x<span class="number">-2</span>] || vis[<span class="number">2</span>][x<span class="number">-2</span>])) <span class="built_in">dfs</span>(x+<span class="number">1</span>, S);<span class="comment">//两条边重复计算</span></span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs</span>(x+<span class="number">1</span>, S+E[x][i]);</span><br><span class="line">		vis[x][i] = <span class="number">0</span>; </span><br><span class="line">		--*st;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); ans = <span class="number">5e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">	E[<span class="number">1</span>][<span class="number">1</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, <span class="number">1</span>); E[<span class="number">1</span>][<span class="number">2</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, n);<span class="comment">//1连1号点，2连n号点，3连中间最优的点</span></span><br><span class="line">	E[<span class="number">1</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dis</span>(<span class="number">1</span>, i) &lt; E[<span class="number">1</span>][<span class="number">3</span>]) E[<span class="number">1</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	E[<span class="number">2</span>][<span class="number">1</span>] = <span class="built_in">dis</span>(n, <span class="number">1</span>); E[<span class="number">2</span>][<span class="number">2</span>] = <span class="built_in">dis</span>(n, n);</span><br><span class="line">	E[<span class="number">2</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(n, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dis</span>(n, i) &lt; E[<span class="number">2</span>][<span class="number">3</span>]) E[<span class="number">2</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(n, i);</span><br><span class="line">	&#125;</span><br><span class="line">	E[<span class="number">3</span>][<span class="number">1</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, <span class="number">1</span>); E[<span class="number">3</span>][<span class="number">2</span>] = <span class="built_in">dis</span>(n, <span class="number">1</span>);</span><br><span class="line">	E[<span class="number">3</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dis</span>(i, <span class="number">1</span>) &lt; E[<span class="number">3</span>][<span class="number">3</span>]) E[<span class="number">3</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(i, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	E[<span class="number">4</span>][<span class="number">1</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, n); E[<span class="number">4</span>][<span class="number">2</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, n);</span><br><span class="line">	E[<span class="number">4</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(<span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dis</span>(i, n) &lt; E[<span class="number">4</span>][<span class="number">3</span>]) E[<span class="number">4</span>][<span class="number">3</span>] = <span class="built_in">dis</span>(i, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

    </div>
</div>

<h3 id="1651-D-Nearest-Excluded-Points"><a href="#1651-D-Nearest-Excluded-Points" class="headerlink" title="1651.D. Nearest Excluded Points"></a>1651.D. Nearest Excluded Points</h3><h5 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h5><p>平面上有n个点，对于每个点，求距离这个点曼哈顿距离最小且不在点集内的点</p>
<h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><p>由最小曼哈顿距离可以联想的bfs，对于一个点可以bfs直到找到一个不在点集内的点。但是这样显然会超时。因此我们可以反向思考，从边界点开始bfs，对于一个点u，如果与他相邻的点$v$没有被遍历到，那么u的答案和$v$的答案是相同的</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (ts&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ts&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>, P = <span class="number">998244353</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mx[<span class="number">4</span>]=&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;, my[<span class="number">4</span>]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"><span class="keyword">int</span> X[N], Y[N], vis[N];</span><br><span class="line">pii ans[N];</span><br><span class="line">map&lt;pii, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;X[i], &amp;Y[i]);</span><br><span class="line">		mp[<span class="built_in">mk</span>(X[i], Y[i])] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> xx = X[i]+mx[j], yy = Y[i]+my[j];</span><br><span class="line">			<span class="keyword">if</span> (!mp[<span class="built_in">mk</span>(xx, yy)]) &#123;</span><br><span class="line">				ans[i] = <span class="built_in">mk</span>(xx, yy), vis[i] = <span class="number">1</span>, q.<span class="built_in">push</span>(i);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> i = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> xx = X[i]+mx[j], yy = Y[i]+my[j];</span><br><span class="line">			<span class="keyword">if</span> (mp[<span class="built_in">mk</span>(xx, yy)]) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = mp[<span class="built_in">mk</span>(xx, yy)];</span><br><span class="line">				<span class="keyword">if</span> (!vis[t]) ans[t] = ans[i], vis[t] = <span class="number">1</span>, q.<span class="built_in">push</span>(t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans[i].fi, ans[i].se);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1651-E-Sum-of-Matchings"><a href="#1651-E-Sum-of-Matchings" class="headerlink" title="1651.E.Sum of Matchings"></a>1651.E.Sum of Matchings</h3><h5 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h5><p>![image-20220512192133992](D:\My blog\source_posts\photo\image-20220512192133992.png)</p>
<p>$n\le 1500$</p>
<h5 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h5><p>由于是二分图，且每个节点度数为2，因此整张图可以分成若干个路径和环</p>
<p>考虑计算每条路径的贡献，环也可以看成路径，路径最多有$n^2$个。</p>
<p>假设一条路径中最大最小的点分别为ml,mr,mL,mR</p>
<img src="D:\My blog\source\_posts\photo\image-20220512194106248.png" alt="image-20220512194106248" style="zoom:33%;" />

<p>如果路径两端外的两个节点都在$[ml,mr],[mL,mR]$之间，那么贡献就是ml,mr两边的区间相乘</p>
<p>如果不在，贡献应该做相应的改变，避免重复计算</p>
<img src="D:\My blog\source\_posts\photo\image-20220512194235140.png" alt="image-20220512194235140" style="zoom:33%;" />



<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (ts&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ts&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3007</span>, P = <span class="number">998244353</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ml, mr, mL, mR;</span><br><span class="line"><span class="keyword">int</span> vis[N], st[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; E[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	E[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">	E[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> la)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">	st[++*st] = x; vis[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= n) ml = <span class="built_in">min</span>(ml, x), mr = <span class="built_in">max</span>(mr, x);</span><br><span class="line">	<span class="keyword">else</span> mL = <span class="built_in">min</span>(mL, x), mR = <span class="built_in">max</span>(mR, x);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[x].<span class="built_in">size</span>(); i++) <span class="keyword">if</span> (E[x][i] != la) &#123;</span><br><span class="line">		<span class="built_in">dfs</span>(E[x][i], x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ml, <span class="keyword">int</span> mr, <span class="keyword">int</span> mL, <span class="keyword">int</span> mR, <span class="keyword">int</span> &amp;l, <span class="keyword">int</span> &amp;r, <span class="keyword">int</span> &amp;L, <span class="keyword">int</span> &amp;R)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; ml) l = <span class="built_in">max</span>(x, l);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x &gt; mr) r = <span class="built_in">min</span>(x, r);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; mL) L = <span class="built_in">max</span>(x, L);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x &gt; mR) R = <span class="built_in">min</span>(x, R);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt;= <span class="number">2</span>*n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="built_in">add</span>(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span>*n; i++) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		*st = <span class="number">0</span>; ml = n; mr = <span class="number">1</span>; mL = <span class="number">2</span>*n; mR = n+<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(i, <span class="number">0</span>);</span><br><span class="line">		ans += <span class="number">1ll</span>*ml*(n-mr+<span class="number">1</span>)*(mL-n)*(<span class="number">2</span>*n-mR+<span class="number">1</span>)*(*st/<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">1</span>, h1; h &lt;= *st; h++) &#123;</span><br><span class="line">			ml = n; mr = <span class="number">1</span>; mL = <span class="number">2</span>*n; mR = n+<span class="number">1</span>;</span><br><span class="line">			h1 = (h<span class="number">-2</span>+(*st))%(*st)+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = h, len = <span class="number">1</span>; t%(*st)+<span class="number">1</span> != h; len++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (st[t] &lt;= n) ml = <span class="built_in">min</span>(ml, st[t]), mr = <span class="built_in">max</span>(mr, st[t]);</span><br><span class="line">					<span class="keyword">else</span> mL = <span class="built_in">min</span>(mL, st[t]), mR = <span class="built_in">max</span>(mR, st[t]);</span><br><span class="line">					t = t%(*st)+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">int</span> l = <span class="number">0</span>, r = n+<span class="number">1</span>, L = n, R = <span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span> (!<span class="built_in">change</span>(st[h1], ml, mr, mL, mR, l, r, L, R)) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span> (!<span class="built_in">change</span>(st[t], ml, mr, mL, mR, l, r, L, R)) <span class="keyword">continue</span>;</span><br><span class="line">					ans += <span class="number">1ll</span>*<span class="built_in">max</span>((ml-l), <span class="number">0</span>)*<span class="built_in">max</span>((r-mr), <span class="number">0</span>)*<span class="built_in">max</span>((mL-L), <span class="number">0</span>)*<span class="built_in">max</span>((R-mR), <span class="number">0</span>)*(len/<span class="number">2</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1651-E-Sum-of-Matchings-1"><a href="#1651-E-Sum-of-Matchings-1" class="headerlink" title="1651.E.Sum of Matchings"></a>1651.E.Sum of Matchings</h3><h5 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h5><h5 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h5><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>曼哈顿距离</tag>
        <tag>bfs</tag>
        <tag>二分图最大匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/2021/10/31/My-First-Blog/</url>
    <content><![CDATA[<p>2021.10.31<br>之前在csdn上写过blog，但实在太丑，所以想自己整一个blog。虽然还很简陋，但会慢慢改变的。</p>
<p>目前的目标是更新所有OI算法，包括以前完全看不懂的那种，还有题解</p>
]]></content>
  </entry>
  <entry>
    <title>codeforces593D</title>
    <url>/2021/11/02/codeforces593D/</url>
    <content><![CDATA[<hr>
<h2>题意</h2>
   给一颗有边权的树，有两种操作：

<p>1.选择一个数$y_i$和两个节点$a_i, b_i$。从$a_i走到 b_i$，每当他经过一条边$j$时，他选择的数$y_i$会立刻变成$\lfloor \frac{y_i}{x_j} \rfloor$，也就是$\frac{y_i}{x_i}$向下取整。</p>
<p>2.选择第$j$条边$p_j$，把它的边权$x_{p_i}$改成一个正整数$c_i \in [1,x_{p_i}]$。</p>
<h2>
</h2>

<hr>
<h2>题解</h2>

<p>这题乍一看很难，因为下取整必须按顺序一个个进行，这就无法方便的维护区间信息。如果不是下取整完全可以使用树剖维护区间乘积。</p>
<p>然而，下取整有着良好的性质，一次除数不为$1$的除法必定使原数减小一半，也就是至多$log$次必然使原数变为0</p>
<p>观察到边权是单调递减的，也就是变为1后便不会在改变。那么我们定义$fa_i$表示节点i的第一个边权不为1的祖先，利用路径压缩来维持一个较好的复杂度。</p>
<p>剩下的就是暴力找路径，路径长度$&gt;log1e18$的就可以直接退出了。可能会跳到LCA的祖先上，但不会影响答案</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m, cnt, ct;</span><br><span class="line"><span class="keyword">int</span> head[N], fa[N], f[N], dep[N];<span class="comment">//f并查集的fa </span></span><br><span class="line">ll val[N], q[N], st[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t, nxt;</span><br><span class="line">	ll v;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, ll v)</span> </span>&#123;</span><br><span class="line">	e[++cnt].t = t; e[cnt].nxt = head[u]; e[cnt].v = v; head[u]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">find</span>(f[x]);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ff, ll v)</span> </span>&#123;</span><br><span class="line">	fa[x] = ff; val[x] = v; dep[x] = dep[ff]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (val[x] == <span class="number">1</span>) f[x] = ff;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == ff) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(t, x, e[i].v); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, ll c)</span> </span>&#123;</span><br><span class="line">	ll tmp = c; *q = *st = <span class="number">0</span>;</span><br><span class="line">	a = <span class="built_in">find</span>(a); b = <span class="built_in">find</span>(b);</span><br><span class="line">	<span class="keyword">while</span> (a != b &amp;&amp; tmp) &#123;</span><br><span class="line">		<span class="keyword">if</span> (dep[a] &gt; dep[b]) &#123;</span><br><span class="line">			q[++*q] = val[a];</span><br><span class="line">			tmp/=val[a];</span><br><span class="line">			a = <span class="built_in">find</span>(fa[a]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			st[++*st] = val[b];</span><br><span class="line">			tmp/=val[b];<span class="comment">//会出问题吗? </span></span><br><span class="line">			b = <span class="built_in">find</span>(fa[b]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!tmp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= *q; i++) c/=q[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = *st; i; i--) c/=st[i];</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, t; i &lt; n; i++) &#123;</span><br><span class="line">		ll v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;t, &amp;v);</span><br><span class="line">		<span class="built_in">add</span>(u, t, v); <span class="built_in">add</span>(t, u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, op, a, b; i &lt;= m; i++) &#123;</span><br><span class="line">		ll c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;a);</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;b, &amp;c);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(a, b, c));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;c);</span><br><span class="line">			<span class="keyword">int</span> u = e[a&lt;&lt;<span class="number">1</span>].t, t = e[a&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].t;</span><br><span class="line">			<span class="keyword">if</span> (fa[u] == t) <span class="built_in">swap</span>(u, t);</span><br><span class="line">			val[t] = c;</span><br><span class="line">			<span class="keyword">if</span> (c == <span class="number">1</span>) f[t] = u;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>取模必定除2</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces592D Super M</title>
    <url>/2021/11/28/codeforces592D-Super-M/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/contest/592/problem/D">Problem - D - Codeforces</a></p>
<img src="D:\My blog\source\_posts\photo\image-20211128111512322.png" alt="image-20211128111512322" style="zoom:67%;" />



<hr>
<p>​        这是一道很有趣的题。</p>
<p>​        首先一个点不在两个关键点的路径上，那么它一定不会被遍历到，走它是绕远路。因此我们可以去除那些无用点，留下有用点构成的一棵树。所有的叶子节点一定是关键点，如果叶节点不是关键点，那么一定无用。</p>
<p>​        考虑如果你需要到所有点在回到初始点，那么这相当于遍历整棵树，因为需要遍历叶子，此时的答案就是$2\times(n-1)$，注意此时n的大小已经变了。</p>
<p>​        现在不需要回去，那么可以少走一条路径。我们当然希望这条路越长越好，树上最长路就是直径。</p>
<p>​        题目要求找出最小的直径端点，所以我们要找出所有直径。</p>
<p>​        1.首先直径之间必然有交点。</p>
<p>​        若无交点，假设$|s1t1|=|s2t2|=直径$，那么$max(|s1x’|,|x’t1|)+|xx1|+max(|s2x|,|xt2|)&gt;|s1t1|$,推出$|s1t1|$不是直径，矛盾</p>
<img src="D:\My blog\source\_posts\photo\image-20211128114642872.png" alt="image-20211128114642872" style="zoom:50%;" />

<p>​    </p>
<p>​        2.直径必然长这样</p>
<img src="D:\My blog\source\_posts\photo\image-20211128115254527.png" alt="image-20211128115254527" style="zoom:50%;" />



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd c=getchar()</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="keyword">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;<span class="keyword">char</span> c;<span class="keyword">while</span> (dd,c&gt;<span class="string">&#x27;9&#x27;</span> || c&lt;<span class="string">&#x27;0&#x27;</span>) <span class="keyword">if</span> (c==<span class="string">&#x27;-&#x27;</span>) w=<span class="number">-1</span>;<span class="keyword">while</span> (c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>,dd;<span class="keyword">return</span> s*w;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> dd</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),x=-x;<span class="keyword">if</span> (x&gt;=<span class="number">10</span>) <span class="built_in">write</span>(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>|<span class="string">&#x27;0&#x27;</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writesp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="built_in">write</span>(x);<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, ans;</span><br><span class="line"><span class="keyword">int</span> head[N], a[N], f[N], dep[N], ff[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t,nxt;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">	e[++cnt].t = t; e[cnt].nxt = head[u]; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs1</span>(t, x);</span><br><span class="line">		f[x] |= f[t];</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=f[x]; <span class="comment">//节点个数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	dep[x] = dep[fa]+<span class="number">1</span>; ff[x] = fa;</span><br><span class="line">	<span class="keyword">int</span> mx = x; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == fa || !f[t]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> v = <span class="built_in">dfs2</span>(t, x);</span><br><span class="line">		<span class="keyword">if</span> (dep[v] &gt; dep[mx]) mx = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mx;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		u = <span class="built_in">read</span>(); v = <span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) a[i] = <span class="built_in">read</span>(), f[a[i]] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs1</span>(a[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> S = <span class="built_in">dfs2</span>(a[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> T = <span class="built_in">dfs2</span>(S, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> mi = <span class="built_in">min</span>(S, T);</span><br><span class="line">	<span class="keyword">int</span> di = <span class="number">2</span>*(ans<span class="number">-1</span>)-dep[T]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dep[i] == dep[T]) mi = <span class="built_in">min</span>(mi, i);</span><br><span class="line">	<span class="built_in">dfs2</span>(T, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dep[i] == dep[S]) mi = <span class="built_in">min</span>(mi, i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>, mi, di);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 774 CF1646</title>
    <url>/2022/03/24/Codeforces-Round-774-Div-2/</url>
    <content><![CDATA[<p>久违的题解qwq，再也不摸了</p>
<h3 id="D-Weight-the-Tree"><a href="#D-Weight-the-Tree" class="headerlink" title="D Weight the Tree"></a>D Weight the Tree</h3><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>​        有一棵树，要求你给每个点赋一个正整数值，要求好点尽可能多的情况下令值的总和最小。一个点为好点当且仅当其权值等于其相邻节点的和</p>
<h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><h6 id="一、独立集"><a href="#一、独立集" class="headerlink" title="一、独立集"></a>一、独立集</h6><p>学到一个独立集写法。</p>
<p>首先当$n&gt;2$ 时，两个好点必然不可能相邻，其中的一个节点必不是叶子。那么答案就是树上最大独立集了，先假设根节点染不染，只后间隔染色，比较两种方案好点个数。如果一样，那么为了让答案尽可能的小，因此我们将坏点设置为1，统计答案。</p>
<h6 id="二、树形dp"><a href="#二、树形dp" class="headerlink" title="二、树形dp"></a>二、树形dp</h6><p>比较lou的想法。</p>
<p>定义$f1_{i,0/1}$为在以$i$为根的子树中，选或不选$i$最大的好点个数，$f2_{i,0/1}$为在f1最大的情况下令权值和尽可能的小。转移看代码。</p>
<p>最后重新跑一遍dfs输出方案</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> f1[N][<span class="number">2</span>], f2[N][<span class="number">2</span>], val[N], ru[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; E[N];</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	f1[x][<span class="number">1</span>] = <span class="number">1</span>; f2[x][<span class="number">1</span>] = ru[x]; f2[x][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = E[x][i];</span><br><span class="line">		<span class="keyword">if</span> (t == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs1</span>(t, x);</span><br><span class="line">		f1[x][<span class="number">1</span>] += f1[t][<span class="number">0</span>]; f2[x][<span class="number">1</span>] += f2[t][<span class="number">0</span>];</span><br><span class="line">		f1[x][<span class="number">0</span>] += <span class="built_in">max</span>(f1[t][<span class="number">0</span>], f1[t][<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span> (f1[t][<span class="number">0</span>] &gt; f1[t][<span class="number">1</span>]) f2[x][<span class="number">0</span>] += f2[t][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (f1[t][<span class="number">0</span>] &lt; f1[t][<span class="number">1</span>]) f2[x][<span class="number">0</span>] += f2[t][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span> f2[x][<span class="number">0</span>] += <span class="built_in">min</span>(f2[t][<span class="number">0</span>], f2[t][<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> vfa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (vfa == <span class="number">1</span>) val[x] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (f1[x][<span class="number">0</span>] &gt; f1[x][<span class="number">1</span>]) val[x] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (f1[x][<span class="number">1</span>] &gt; f1[x][<span class="number">0</span>]) val[x] = ru[x];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (f2[x][<span class="number">0</span>] &lt; f2[x][<span class="number">1</span>]) val[x] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> val[x] = ru[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E[x].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = E[x][i];</span><br><span class="line">		<span class="keyword">if</span> (t == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (val[x] == ru[x]) <span class="built_in">dfs2</span>(t, x, <span class="number">1</span>);<span class="comment">//Ò¶×ÓÏàÍ¬µ«²»Ðè¿¼ÂÇ </span></span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">dfs2</span>(t, x, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;2 2\n1 1\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">		E[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">		E[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">		ru[u]++; ru[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (f1[<span class="number">1</span>][<span class="number">0</span>] &gt; f1[<span class="number">1</span>][<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,f1[<span class="number">1</span>][<span class="number">0</span>], f2[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (f1[<span class="number">1</span>][<span class="number">0</span>] &lt; f1[<span class="number">1</span>][<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,f1[<span class="number">1</span>][<span class="number">1</span>], f2[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,f1[<span class="number">1</span>][<span class="number">0</span>],  <span class="built_in">min</span>(f2[<span class="number">1</span>][<span class="number">0</span>], f2[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span> (<span class="string">&quot;%d &quot;</span>, val[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="E-Power-Board"><a href="#E-Power-Board" class="headerlink" title="E Power Board"></a>E Power Board</h3><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><img src="D:\My blog\source\_posts\photo\image-20220324092829338.png" alt="image-20220324092829338" style="zoom:50%;" />

<h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>可以看出，对于第a行，它只会和$a^2,a^3,a^4……$行重复，这对任意一个a都成立。因此，我们可以预处理出$f_i$表示对于一个 a，如果矩阵中有第$a^i$行，那么不重复的数有$f_i$个，可以看出时间复杂度为$O(mlogn)$</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">25</span>], vis[<span class="number">25</span>*N], f[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">		ans[i] = ans[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!vis[i*j]) vis[i*j] = <span class="number">1</span>, ans[i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, S, cnt; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (f[i]) <span class="keyword">continue</span>;</span><br><span class="line">		S = i; cnt = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (S &lt;= n/i) S*=i, f[S] = <span class="number">1</span>, cnt++;</span><br><span class="line">		Ans+=ans[cnt];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>树形dp</tag>
        <tag>独立集</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces911F Tree Destruction</title>
    <url>/2021/11/09/codeforces911F-Tree-Destruction/</url>
    <content><![CDATA[<p>![image-20211109090732900](D:\My blog\source_posts\photo\image-20211109090732900.png)</p>
<hr>
<p>先找出直径，不在直径上的点的贡献即到直径两端的远的那个的距离</p>
<p>证明：</p>
<img src="D:\My blog\source\_posts\photo\image-20211109142422747.png" alt="image-20211109142422747" style="zoom:67%;" />

<p>假设st为直径。</p>
<p>若距离u最远的点为v，那么可知$dis_{o_2v}&gt;dis_{o_2t}$, 那么$dis_{sv}&gt;dis_{vt}$ 即st不是直径，产生矛盾</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dd c = getchar()</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="keyword">int</span> s=<span class="number">0</span>, w=<span class="number">1</span>; <span class="keyword">char</span> c; <span class="keyword">while</span> (dd, c&gt;<span class="string">&#x27;9&#x27;</span> || c&lt;<span class="string">&#x27;0&#x27;</span>) <span class="keyword">if</span> (c==<span class="string">&#x27;-&#x27;</span>) w=<span class="number">-1</span>; <span class="keyword">while</span> (c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>, dd; <span class="keyword">return</span> s*w;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> dd</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, cnt, ct, S, T;</span><br><span class="line"><span class="keyword">int</span> head[N], dis[<span class="number">3</span>][N], ru[N], Ans[N][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t, nxt;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	e[++cnt].t = v; e[cnt].nxt = head[u]; head[u]=cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> dis[])</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">	dis[s] = <span class="number">1</span>; q.<span class="built_in">push</span>(s);</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">			<span class="keyword">if</span> (dis[t]) <span class="keyword">continue</span>;</span><br><span class="line">			dis[t] = dis[u]+<span class="number">1</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mx = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		dis[i]--;</span><br><span class="line">		<span class="keyword">if</span> (dis[i] &gt; dis[mx]) mx = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> mx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	Ans[++ct][<span class="number">0</span>]=u, Ans[ct][<span class="number">1</span>]=T, Ans[ct][<span class="number">2</span>]=u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (ru[t] == <span class="number">2</span> &amp;&amp; t != fa) <span class="built_in">dfs</span>(t, u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	n = <span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++) &#123;</span><br><span class="line">		u = <span class="built_in">read</span>(); v = <span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(u, v); <span class="built_in">add</span>(v, u);</span><br><span class="line">		ru[u]++; ru[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	S = <span class="built_in">bfs</span>(<span class="number">1</span>, dis[<span class="number">0</span>]);</span><br><span class="line">	T = <span class="built_in">bfs</span>(S, dis[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">bfs</span>(T, dis[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//	printf(&quot;S = %d T = %d\n&quot;, S, T );</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (ru[i] == <span class="number">1</span> &amp;&amp; i != S &amp;&amp; i != T) q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="comment">//	printf(&quot;ans = %d\n&quot;, q.front() );</span></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">		ans+=<span class="built_in">max</span>(dis[<span class="number">1</span>][u], dis[<span class="number">2</span>][u]);</span><br><span class="line">		<span class="keyword">if</span> (dis[<span class="number">1</span>][u] &gt; dis[<span class="number">2</span>][u]) Ans[++ct][<span class="number">0</span>]=u, Ans[ct][<span class="number">1</span>]=S, Ans[ct][<span class="number">2</span>]=u;</span><br><span class="line">		<span class="keyword">else</span> Ans[++ct][<span class="number">0</span>]=u, Ans[ct][<span class="number">1</span>]=T, Ans[ct][<span class="number">2</span>]=u;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">			ru[t]--;</span><br><span class="line">			<span class="keyword">if</span> (ru[t] == <span class="number">1</span>) q.<span class="built_in">push</span>(t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(S, <span class="number">0</span>);</span><br><span class="line">	ans+=<span class="number">1ll</span>*(<span class="number">1</span>+dis[<span class="number">1</span>][T])*dis[<span class="number">1</span>][T]/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, Ans[i][<span class="number">0</span>], Ans[i][<span class="number">1</span>], Ans[i][<span class="number">2</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>codeforces741DArpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</title>
    <url>/2021/11/27/codeforces741D-Arpa%E2%80%99s-letter-marked-tree-and-Mehrdad%E2%80%99s-Dokhtar-kosh-paths/</url>
    <content><![CDATA[<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p><a href="https://codeforces.com/problemset/problem/741/D">Problem - 741D - Codeforces</a></p>
<img src="D:\My blog\source\_posts\photo\image-20211127222734881.png" alt="image-20211127222734881" style="zoom: 67%;" />





<hr>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这大概是我学树上启发式合并的最后一题，虽然挺早就写好了但一直到今天才写题解，抱歉</p>
<p>​        首先一个满足条件的串最多有一种字符个数为奇数，其他字符个数必须是偶数。而且字符总数只有22个，所以我们想到可以用二进制记录一条路径上每种字符是奇数还是偶数个。</p>
<p>​        $设dis_i$表示从$i$到根节点之间的每条边的异或和，边的权值为$2^{c_i-‘a’}$,其中第i位为1表示此种字符个数为奇数。由于权值在边上，所以我们惊讶的发现不用寻找LCA，$dis_i\bigoplus dis_j$就能代表从i到j的路径，$\bigoplus$表示异或。而一条合法的路径只有23种情况，分别是$…00,…01, …010，…0100，……$，统计$dis_{dis_i\bigoplus 前面的23个数}$的个数就可以找到答案</p>
<p>​        然后开始树上启发式合并，先遍历轻子树，并清空计数数组coun,再遍历重子树，不清空。一一统计轻子树的答案，统计完一个子树就将其加入coun数组，这样可以保证每次统计LCA都是当前节点，并且不会算重。</p>
<hr>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, T;</span><br><span class="line"><span class="keyword">int</span> head[N], dep[N], dis[N], dfn[N], id[N], siz[N], Bs[N], ans[N], coun[(<span class="number">1</span>&lt;&lt;<span class="number">22</span>)+<span class="number">7</span>], pre[<span class="number">23</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> t, nxt, v;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">	e[++cnt] = (edge) &#123;t, head[u], v&#125;; head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> V)</span> </span>&#123;</span><br><span class="line">	dfn[++T] = x; id[x] = T;</span><br><span class="line">	siz[x] = <span class="number">1</span>; dis[x] = dis[fa]^V;</span><br><span class="line">	dep[x] = dep[fa]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="built_in">dfs1</span>(t, x, e[i].v);</span><br><span class="line">		<span class="keyword">if</span> (siz[t] &gt; siz[Bs[x]]) Bs[x] = t;</span><br><span class="line">		siz[x] += siz[t];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> top, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">22</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (coun[dis[x]^pre[i]] &gt;= <span class="number">0</span>) ans[top] = <span class="built_in">max</span>(ans[top], coun[dis[x]^pre[i]]+dep[x]<span class="number">-2</span>*dep[top]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	coun[dis[x]] = <span class="built_in">max</span>(coun[dis[x]], dep[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = id[x]; j &lt;= id[x]+siz[x]<span class="number">-1</span>; j++)</span><br><span class="line">		coun[dis[dfn[j]]] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == Bs[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(t, x);</span><br><span class="line">		<span class="built_in">clear</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Bs[x]) <span class="built_in">dfs2</span>(Bs[x], x);</span><br><span class="line">	ans[x] = <span class="built_in">max</span>(ans[x], ans[Bs[x]]);</span><br><span class="line">	<span class="built_in">query</span>(x, x);</span><br><span class="line">	<span class="built_in">Add</span>(x);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt) &#123;</span><br><span class="line">		<span class="keyword">int</span> t = e[i].t;</span><br><span class="line">		<span class="keyword">if</span> (t == Bs[x]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = id[t]; j &lt;= id[t]+siz[t]<span class="number">-1</span>; j++)</span><br><span class="line">			<span class="built_in">query</span>(x, dfn[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = id[t]; j &lt;= id[t]+siz[t]<span class="number">-1</span>; j++)</span><br><span class="line">			<span class="built_in">Add</span>(dfn[j]);</span><br><span class="line">		ans[x] = <span class="built_in">max</span>(ans[x], ans[t]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(coun, <span class="number">-1</span>, <span class="keyword">sizeof</span> coun);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">21</span>; i++) pre[i] = <span class="number">1</span>&lt;&lt;i;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, f; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">char</span> c;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %c&quot;</span>, &amp;f, &amp;c);</span><br><span class="line">		<span class="built_in">add</span>(f, i, <span class="number">1</span>&lt;&lt;(c-<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>dsu</tag>
        <tag>树上启发式合并</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>CodeTON Round 1 (Div. 1 + Div. 2, Rated, Prizes!)</title>
    <url>/2022/04/13/CodeTON-Round-1-Div-1-Div-2-Rated-Prizes/</url>
    <content><![CDATA[<h3 id="A-Good-Pairs"><a href="#A-Good-Pairs" class="headerlink" title="A.Good Pairs"></a>A.Good Pairs</h3><h5 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h5><p>![image-20220413112459295](D:\My blog\source_posts\photo\image-20220413112459295.png)</p>
<h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>要求数轴上$a_k$在$a_i, a_j$之间， 求最大最小数</p>
<h3 id="B"><a href="#B" class="headerlink" title="B."></a>B.</h3><h5 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h5><p>![image-20220413113036997](D:\My blog\source_posts\photo\image-20220413113036997.png)</p>
<h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>假设有三个数$a_i,a_j,a_k$，先删除$a_i$，再删除$a_j$的结果就是$a_k-a_i-(a_j-a_i) = a_k-a_j$</p>
<p>因此只要找是否有两个数的差等于k</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mp.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;K);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mp.<span class="built_in">count</span>(a[i]+K) || mp.<span class="built_in">count</span>(a[i]-K)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		mp.<span class="built_in">insert</span>(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="C"><a href="#C" class="headerlink" title="C."></a>C.</h3><h5 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h5><p>![image-20220413120251015](D:\My blog\source_posts\photo\image-20220413120251015.png)</p>
<h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><p>一开始就有一个想法，如果所有数都大于2，那么只要从大到小依次模成0就可以了，所以考虑特殊的数0,1</p>
<p>如果0和1同时存在，显然不行。</p>
<p>如果没有1，那么可以全部变成0</p>
<p>最后考虑有1无0的情况，那么需要将所有数模成1。对于一个数$a_i$，只有$a_i\ Mod\ a_i-1或a_i-1的因数$结果会是1，但是如果$a_i-1$存在，那么一定会将他变成0，因此需要判断是否有两个数相邻</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>);</span><br><span class="line">	n = <span class="built_in">unique</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>)-a<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; a[<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//a[2]可能会越界，所以特判n=1</span></span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] == <span class="number">0</span> || a[<span class="number">1</span>] &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">if</span> (a[i]+<span class="number">1</span> == a[i+<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="D"><a href="#D" class="headerlink" title="D."></a>D.</h3><h5 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h5><h5 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h5><p>由于 $n\ Mod\ k$ 有 k 个不同的余数 $ 0,1,2…k-1$ ，可以看出 $n = \frac{k(k-1)}{2}+xk ,x\in\mathbb{N} $</p>
<p>变化后 $2n = k(k-1+2x)$，</p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><h3 id="E"><a href="#E" class="headerlink" title="E."></a>E.</h3><h5 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h5><h5 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h5><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><h3 id="F"><a href="#F" class="headerlink" title="F."></a>F.</h3><h5 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h5><h5 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h5><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5>]]></content>
      <categories>
        <category>题解</category>
        <category>CF</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>左偏树</title>
    <url>/2022/04/15/%E5%B7%A6%E5%81%8F%E6%A0%91/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3377">P3377 【模板】左偏树（可并堆）</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">7</span>, P = <span class="number">998244353</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) (tr[x].s[0])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) (tr[x].s[1])</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> s[<span class="number">2</span>], dis, v;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x == fa[x] ? x : fa[x] = <span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x|y;</span><br><span class="line">	<span class="keyword">if</span> (tr[x].v == tr[y].v ? x &gt; y : tr[x].v &gt; tr[y].v) <span class="built_in">swap</span>(x, y);</span><br><span class="line">	<span class="built_in">rs</span>(x) = <span class="built_in">merge</span>(<span class="built_in">rs</span>(x), y);</span><br><span class="line">	fa[<span class="built_in">rs</span>(x)] = x;</span><br><span class="line">	<span class="keyword">if</span> (tr[<span class="built_in">ls</span>(x)].dis &lt; tr[<span class="built_in">rs</span>(x)].dis) <span class="built_in">swap</span>(<span class="built_in">ls</span>(x), <span class="built_in">rs</span>(x));</span><br><span class="line">	tr[x].dis = tr[<span class="built_in">rs</span>(x)].dis+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	tr[x].v = <span class="number">-1</span>;</span><br><span class="line">	x = fa[x] = <span class="built_in">merge</span>(<span class="built_in">ls</span>(x), <span class="built_in">rs</span>(x));</span><br><span class="line">	fa[x] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tr[i].v), fa[i] = i;</span><br><span class="line">	<span class="keyword">int</span> op, x, y;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">			<span class="keyword">if</span> (tr[x].v == <span class="number">-1</span> || tr[y].v == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">			x = <span class="built_in">find</span>(x); y = <span class="built_in">find</span>(y);</span><br><span class="line">			<span class="keyword">if</span> (x != y) <span class="built_in">merge</span>(x, y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (tr[x].v == <span class="number">-1</span>) &#123;</span><br><span class="line">				<span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x = <span class="built_in">find</span>(x); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[x].v);</span><br><span class="line">				<span class="built_in">pop</span>(x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>左偏树</tag>
      </tags>
  </entry>
  <entry>
    <title>平面最近点对</title>
    <url>/2022/04/20/%E5%B9%B3%E9%9D%A2%E6%9C%80%E8%BF%91%E7%82%B9%E5%AF%B9/</url>
    <content><![CDATA[<h4 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h4><p>话说这玩意我居然都不会了，明明以前写过（虽然我甚至看不出来是我写的）</p>
<h4 id="乱搞"><a href="#乱搞" class="headerlink" title="乱搞"></a>乱搞</h4><p>![image-20220420164217825](D:\My blog\source_posts\photo\image-20220420164217825.png)</p>
<p>![image-20220420164241752](D:\My blog\source_posts\photo\image-20220420164241752.png)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span>+<span class="number">7</span>, P = <span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">5e9</span>, INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> ans = INF;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a) &#123;</span><br><span class="line">		<span class="keyword">return</span> x*y &lt; a.x*a.y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">hu</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="keyword">return</span> x/<span class="number">180</span>*pi;&#125;<span class="comment">//×ª»¡¶ÈÖÆ </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">around</span><span class="params">(node &amp;i, <span class="keyword">double</span> du)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x = i.x, y = i.y;</span><br><span class="line">	<span class="keyword">double</span> hh=<span class="built_in">hu</span>(du);</span><br><span class="line">	i.x = x*<span class="built_in">cos</span>(hh)-y*<span class="built_in">sin</span>(hh);<span class="comment">//cos(a+b)</span></span><br><span class="line">	i.y = x*<span class="built_in">sin</span>(hh)+y*<span class="built_in">cos</span>(hh);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(node i, node j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (i.x-j.x)*(i.x-j.x)+(i.y-j.y)*(i.y-j.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= <span class="number">3</span>; t++) &#123;</span><br><span class="line">		<span class="keyword">double</span> du = <span class="built_in">rand</span>()%<span class="number">360</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">around</span>(p[i], du);</span><br><span class="line">		<span class="built_in">sort</span>(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">max</span>(i<span class="number">-50</span>, <span class="number">1</span>); j &lt; i; j++)</span><br><span class="line">				ans = <span class="built_in">min</span>(ans, <span class="built_in">dist</span>(p[i], p[j]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.lf\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>李超线段树</title>
    <url>/2022/04/15/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>没有什么比一遍过更爽的东西了。</p>
<p>是根据<a href="https://www.luogu.com.cn/blog/George1123/solution-p4097">George1123佬</a>的题解写的代码，但是由于是自己编写可能有些粗糙和随意</p>
<p>George1123佬的题解扔后面了，利用edge的网页捕获功能</p>
<p><a href="https://www.luogu.com.cn/problem/P4097">HEOI2013]Segment</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (ts&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ts&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)/2)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">7</span>, P = <span class="number">39989</span>, P1 = <span class="number">1e9</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">double</span> k, b;</span><br><span class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">geth</span><span class="params">(line a, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.k*x+a.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> ts, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, line a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == L &amp;&amp; r == R) &#123;</span><br><span class="line">		<span class="keyword">if</span> (tr[ts].id == <span class="number">0</span> || <span class="built_in">geth</span>(a, l) &gt; <span class="built_in">geth</span>(tr[ts], l) &amp;&amp; <span class="built_in">geth</span>(a, r) &gt; <span class="built_in">geth</span>(tr[ts], r)) &#123;<span class="comment">//原来为空或旧线段太low</span></span><br><span class="line">			tr[ts] = a;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">geth</span>(a, l) &lt; <span class="built_in">geth</span>(tr[ts], l) &amp;&amp; <span class="built_in">geth</span>(a, r) &lt; <span class="built_in">geth</span>(tr[ts], r)) <span class="keyword">return</span>;<span class="comment">//新线段low</span></span><br><span class="line">		<span class="keyword">double</span> t = (tr[ts].b-a.b)/(a.k-tr[ts].k);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">geth</span>(a, l) &lt; <span class="built_in">geth</span>(tr[ts], l)) &#123;<span class="comment">//左侧低</span></span><br><span class="line">			<span class="keyword">if</span> (t &lt; mid) <span class="built_in">change</span>(ls, l, mid, L, mid, tr[ts]), tr[ts] = a;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">change</span>(rs, mid+<span class="number">1</span>, r, mid+<span class="number">1</span>, R, a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//右侧高</span></span><br><span class="line">			<span class="keyword">if</span> (t &gt; mid) <span class="built_in">change</span>(rs, mid+<span class="number">1</span>, r, mid+<span class="number">1</span>, R, tr[ts]), tr[ts] = a;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">change</span>(ls, l, mid, L, mid, a);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (R &lt;= mid) <span class="built_in">change</span>(ls, l, mid, L, R, a);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (L &gt; mid) <span class="built_in">change</span>(rs, mid+<span class="number">1</span>, r, L, R, a);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">change</span>(ls, l, mid, L, mid, a), <span class="built_in">change</span>(rs, mid+<span class="number">1</span>, r, mid+<span class="number">1</span>, R, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">line <span class="title">max</span><span class="params">(line a, line b, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">geth</span>(a, x) == <span class="built_in">geth</span>(b, x)) <span class="keyword">return</span> a.id &lt; b.id ? a : b;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">geth</span>(a, x) &lt; <span class="built_in">geth</span>(b, x) ? b : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">line <span class="title">query</span><span class="params">(<span class="keyword">int</span> ts, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>  x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> tr[ts];</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= mid) <span class="keyword">return</span> <span class="built_in">max</span>(tr[ts], <span class="built_in">query</span>(ls, l, mid, x), x);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">max</span>(tr[ts], <span class="built_in">query</span>(rs, mid+<span class="number">1</span>, r, x), x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	n = <span class="number">39989</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, op, x, x0,x1,y0,y1, la = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); x = (x+la<span class="number">-1</span>)%P+<span class="number">1</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, la = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x).id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x0, &amp;y0, &amp;x1, &amp;y1);</span><br><span class="line">			x0 = (x0+la<span class="number">-1</span>)%P+<span class="number">1</span>;</span><br><span class="line">			x1 = (x1+la<span class="number">-1</span>)%P+<span class="number">1</span>;</span><br><span class="line">			y0 = (y0+la<span class="number">-1</span>)%P1+<span class="number">1</span>;</span><br><span class="line">			y1 = (y1+la<span class="number">-1</span>)%P1+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (x0 &gt; x1) <span class="built_in">swap</span>(x0, x1), <span class="built_in">swap</span>(y0, y1);</span><br><span class="line">			<span class="keyword">double</span> k, b;</span><br><span class="line">			<span class="keyword">if</span> (x0 == x1) k = <span class="number">0</span>, b = <span class="built_in">max</span>(y0, y1);</span><br><span class="line">			<span class="keyword">else</span> k = <span class="number">1.0</span>*(y1-y0)/(x1-x0), b = y0-k*x0;</span><br><span class="line">			<span class="built_in">change</span>(<span class="number">1</span>, <span class="number">1</span>, n, x0, x1, (line)&#123;++cnt, k, b&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>![image-20220415222537871](D:\My blog\source_posts\photo\image-20220415222537871.png)</p>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>李超线段树</tag>
      </tags>
  </entry>
</search>
